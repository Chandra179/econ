package main

import (
	"log"
	"os"
	"os/exec"
	"stock/alphavantage"

	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
	"github.com/joho/godotenv"

	"stock/config"

	// Swagger docs
	_ "stock/docs" // Import Swagger docs generated by swag init

	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
)

// @title Stock Market API
// @version 1.0
// @description API for retrieving time series data from stock markets

// @contact.name API Support
// @contact.email admin@example.com

// @license.name MIT
// @license.url https://opensource.org/licenses/MIT

// @host localhost:8080
// @BasePath /
// @schemes http
func main() {
	// Load environment variables from .env file
	if err := godotenv.Load(); err != nil {
		log.Println("No .env file found, using environment variables")
	}

	// Get configuration
	cfg := config.GetConfig()

	// Setup router
	router := SetupRouter()

	// Setup Swagger endpoints
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// Start server
	log.Printf("Starting server on port %s\n", cfg.Port)
	log.Printf("Swagger UI available at http://localhost:%s/swagger/index.html\n", cfg.Port)
	if err := router.Run(":" + cfg.Port); err != nil {
		log.Fatalf("Failed to start server: %v", err)
	}
}

// SetupRouter initializes the Gin router with API routes
func SetupRouter() *gin.Engine {
	router := gin.Default()

	// Configure CORS
	router.Use(cors.New(cors.Config{
		AllowOrigins:     []string{"*"},
		AllowMethods:     []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"},
		AllowHeaders:     []string{"Origin", "Content-Type", "Accept", "Authorization"},
		ExposeHeaders:    []string{"Content-Length"},
		AllowCredentials: true,
	}))

	// API versioning
	v1 := router.Group("/v1")
	{
		// Time series endpoints
		timeseries := v1.Group("/timeseries")
		{
			timeseries.GET("/:symbol", alphavantage.GetTimeSeriesForSymbol)
			timeseries.GET("/:symbol/:interval", alphavantage.GetTimeSeriesWithInterval)
		}

		// Fundamental data endpoints
		fundamental := v1.Group("/fundamental")
		{
			fundamental.GET("/balance-sheet/:symbol", alphavantage.GetBalanceSheet)
			fundamental.GET("/cash-flow/:symbol", alphavantage.GetCashFlow)
			fundamental.GET("/income-statement/:symbol", alphavantage.GetIncomeStatement)
			fundamental.GET("/company-overview/:symbol", alphavantage.GetCompanyOverview)
		}
	}

	return router
}

func init() {
	// Only in development mode
	if os.Getenv("GO_ENV") == "development" {
		cmd := exec.Command("swag", "init", "-g", "main.go", "-o", "docs")
		err := cmd.Run()
		if err != nil {
			log.Println("Warning: Swagger docs generation failed:", err)
		}
	}
}
